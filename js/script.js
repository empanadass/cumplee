// Array de mensajes de cumplea√±os y emojis correspondientes para las tarjetas
const messages = [
  "¬°Que este nuevo a√±o de vida est√© lleno de momentos inolvidables, alegr√≠a desbordante y mucho amor! Que todos tus sue√±os m√°s anhelados se hagan realidad.",
  "Hoy celebramos tu existencia, tu luz, tu bondad y la alegr√≠a que irradias. Gracias por ser una persona tan maravillosa y por cada momento que compartimos. ¬°Felicidades!",
  "Este es un d√≠a especial para una persona verdaderamente inolvidable. Que la felicidad te siga a cada paso y que cada instante sea un tesoro de momentos felices.",
  "Hoy, el universo entero se une en un coro de alegr√≠a para celebrar tu vida. Que la energ√≠a positiva te envuelva y te gu√≠e hacia un futuro lleno de √©xitos y prosperidad.",
  "Sonr√≠e con todo tu coraz√≥n, porque hoy es tu d√≠a, un d√≠a para celebrar la vida que has construido y la que est√° por venir. ¬°Much√≠simas felicidades en tu cumplea√±os!",
  "¬°Que cada deseo que pidas con el alma se convierta en una hermosa realidad! Que este nuevo ciclo te traiga infinitas bendiciones y oportunidades para crecer.",
  "Abraza fuerte a quienes tienes cerca, siente el cari√±o y la felicidad que te rodea. Que el amor y la amistad sean siempre tus mejores compa√±eros en esta hermosa jornada.",
  "Cierra los ojos por un instante y pide tu deseo m√°s profundo. Conc√©ntrate en √©l, porque el poder de tus sue√±os es inmenso y este es el d√≠a perfecto para que se manifiesten.",
  "¬°Es hora de saltar de felicidad, gritar de alegr√≠a y celebrar la vida con cada fibra de tu ser durante al menos 5 segundos! Que tu energ√≠a contagie a todos a tu alrededor."
];
const emojis = [
  "üéâ", "‚ú®", "üíñ", "üåå", "üòÅ", "üéÅ", "ü§ó", "ÔøΩ", "üï∫"
];

// Obtener elementos del DOM para la cuadr√≠cula y el lienzo de fuegos artificiales
const grid = document.getElementById("cards-container");
const canvas = document.getElementById("fireworks");
const ctx = canvas.getContext("2d");

// --- Secci√≥n para manejar la m√∫sica de fondo en JavaScript ---
const backgroundMusic = document.createElement('audio'); // Crea el elemento <audio>
backgroundMusic.loop = true; // Hace que la m√∫sica se repita
// Define la URL de tu archivo de m√∫sica
// ¬°Importante! Aseg√∫rate de que esta URL sea accesible y el archivo MP3 sea v√°lido.
backgroundMusic.src = "https://tempfile.aiquickdraw.com/s/98c16df768d443d689c8efa20b401c02.mp3";
document.body.appendChild(backgroundMusic); // A√±ade el elemento al cuerpo del documento

// **NUEVA FUNCIONALIDAD: Control de reproducci√≥n seg√∫n la visibilidad de la p√°gina**
document.addEventListener('visibilitychange', () => {
  if (document.hidden) {
      // La p√°gina est√° oculta (el usuario se ha ido a otra pesta√±a/app)
      backgroundMusic.pause();
  } else {
      // La p√°gina est√° visible de nuevo (el usuario ha vuelto)
      // Intentar reproducir la m√∫sica, manejando la pol√≠tica de navegadores
      if (backgroundMusic.paused) {
          backgroundMusic.play().catch(e => console.error("Error al reanudar la m√∫sica:", e));
      }
  }
});

// Establecer las dimensiones del lienzo para que coincidan con el tama√±o de la ventana
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

// Definir una paleta de colores para las part√≠culas de fuegos artificiales
const colors = ["#ff0", "#f0f", "#0ff", "#f00", "#0f0", "#00f", "#fff", "#ff8c00", "#8a2be2"];

// Array global para mantener un registro de todas las part√≠culas activas
let activeParticles = [];

/**
* Crea un efecto de explosi√≥n de fuegos artificiales en una coordenada dada.
* A√±ade nuevas part√≠culas al array global activeParticles.
* @param {number} x - La coordenada x para el origen de la explosi√≥n.
* @param {number} y - La coordenada y para el origen de la explosi√≥n.
*/
function createExplosion(x, y) {
  // Generar 80 part√≠culas para cada explosi√≥n
  for (let i = 0; i < 80; i++) {
      activeParticles.push({
          x,
          y,
          // Componentes de velocidad aleatorios para que las part√≠culas se dispersen
          dx: (Math.random() - 0.5) * 8,
          dy: (Math.random() - 0.5) * 8,
          radius: Math.random() * 3 + 1, // Tama√±o aleatorio para cada part√≠cula
          alpha: 1, // Opacidad inicial (completamente visible)
          color: colors[Math.floor(Math.random() * colors.length)] // Asignar un color aleatorio
      });
  }
}

/**
* Bucle principal de animaci√≥n para dibujar y actualizar todas las part√≠culas de fuegos artificiales.
* Utiliza requestAnimationFrame para animaciones m√°s suaves.
*/
function animateFireworks() {
  // Limpiar completamente todo el lienzo en cada fotograma para evitar que los rastros se oscurezcan acumulativamente
  ctx.clearRect(0, 0, canvas.width, canvas.height);

  // Actualizar la posici√≥n, desvanecer y dibujar cada part√≠cula
  activeParticles = activeParticles.filter(p => {
      p.x += p.dx;
      p.y += p.dy;
      p.alpha -= 0.02; // Reducir gradualmente la opacidad para que las part√≠culas se desvanezcan

      // Dibujar la part√≠cula si todav√≠a est√° visible
      if (p.alpha > 0) {
          ctx.beginPath();
          ctx.arc(p.x, p.y, p.radius, 0, Math.PI * 2); // Dibujar un c√≠rculo para cada part√≠cula
          ctx.fillStyle = `${p.color}`;
          ctx.globalAlpha = p.alpha; // Aplicar la opacidad actual de la part√≠cula
          ctx.fill();
          return true; // Mantener la part√≠cula en el array si todav√≠a est√° visible
      }
      return false; // Eliminar la part√≠cula del array si se ha desvanecido
  });
  ctx.globalAlpha = 1; // Restablecer la opacidad global para el siguiente fotograma

  // Continuar el bucle de animaci√≥n
  requestAnimationFrame(animateFireworks);
}

// Bandera para evitar m√∫ltiples clics r√°pidos en las tarjetas
let isCardClicked = false;

/**
* Genera y a√±ade part√≠culas de luz animadas al fondo del modal.
*/
function generateModalLights() {
  const modalLightsContainer = document.getElementById('modalLights');
  // Limpiar cualquier luz existente para evitar que se acumulen cada vez que se abre el modal
  modalLightsContainer.innerHTML = '';
  const numberOfLights = 40; // Puedes ajustar la densidad de luces aqu√≠

  for (let i = 0; i < numberOfLights; i++) {
      const span = document.createElement('span');
      const x = Math.random() * 100; // Posici√≥n horizontal aleatoria (0-100% del ancho del modal)
      const delay = Math.random() * 8; // Retraso aleatorio antes de que comience la animaci√≥n
      const duration = 5 + Math.random() * 5; // Duraci√≥n de animaci√≥n aleatoria para variedad
      span.style.left = `${x}%`;
      span.style.animationDelay = `${delay}s`;
      span.style.animationDuration = `${duration}s`; // Aplicar duraci√≥n aleatoria a la animaci√≥n CSS
      modalLightsContainer.appendChild(span);
  }
}

/**
* Muestra el modal con el mensaje especificado.
* Tambi√©n dispara la generaci√≥n de luces animadas dentro del modal.
* @param {string} message - El mensaje de cumplea√±os a mostrar en el modal.
*/
function mostrarModal(message) {
  generateModalLights(); // Generar nuevas luces para el fondo del modal
  document.getElementById('modalMessage').textContent = message; // Establecer el texto del mensaje
  document.getElementById('miModal').style.display = 'flex'; // Mostrar el modal usando flexbox para centrarlo
}

/**
* Oculta el modal y limpia el lienzo.
*/
function cerrarModal() {
  document.getElementById('miModal').style.display = 'none';
  // Limpiar el lienzo cuando el modal se cierra para eliminar cualquier efecto de fuegos artificiales persistente
  ctx.clearRect(0, 0, canvas.width, canvas.height);
}

// Detector de eventos para cerrar el modal al hacer clic fuera de su contenido
window.onclick = function(event) {
  const modal = document.getElementById('miModal');
  if (event.target === modal) { // Comprobar si el clic ocurri√≥ directamente sobre la superposici√≥n del modal
      cerrarModal();
  }
}

// Rellenar la cuadr√≠cula con tarjetas, adjuntando oyentes de clics
messages.forEach((msg, index) => {
  const card = document.createElement("div");
  card.classList.add("card");
  card.textContent = emojis[index]; // Mostrar el emoji correspondiente en la tarjeta

  card.addEventListener("click", () => {
      // Intentar reproducir m√∫sica en la interacci√≥n del usuario
      // Los navegadores a menudo requieren un gesto del usuario para reproducir audio.
      // Esto asegura que la m√∫sica se reproduzca si est√° en pausa o bloqueada inicialmente.
      if (backgroundMusic.paused) {
          backgroundMusic.play().catch(e => console.error("Error al intentar reproducir m√∫sica:", e));
      }

      if (isCardClicked) return; // Si ya se ha hecho clic en una tarjeta, ignorar clics subsiguientes
      isCardClicked = true; // Establecer la bandera para evitar clics m√∫ltiples

      // Limpiar el lienzo inmediatamente al hacer clic en una tarjeta para asegurar un punto de partida limpio para los nuevos fuegos artificiales
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // Disparar la animaci√≥n de fuegos artificiales en 3 ubicaciones aleatorias
      for (let i = 0; i < 3; i++) {
          setTimeout(() => {
              const x = Math.random() * canvas.width; // Coordenada x aleatoria
              const y = Math.random() * canvas.height * 0.7; // Coordenada y aleatoria en el 70% superior
              createExplosion(x, y);
          }, i * 200); // Espaciar cada explosi√≥n por 200ms
      }

      // Mostrar el modal despu√©s de un breve retraso para permitir que los fuegos artificiales comiencen a animarse
      setTimeout(() => {
          mostrarModal(msg); // Mostrar el modal con el mensaje
          isCardClicked = false; // Restablecer la bandera una vez que se muestra el modal
      }, 700); // Retraso de 0.7 segundos antes de que aparezca el modal para que los fuegos artificiales sean m√°s visibles
  });
  grid.appendChild(card); // A√±adir la tarjeta creada al contenedor de la cuadr√≠cula
});

// Detector de eventos para ajustar el tama√±o del lienzo cuando se redimensiona la ventana
window.addEventListener('resize', () => {
  canvas.width = window.innerWidth;
  canvas.height = window.innerHeight;
  // Limpiar el lienzo al redimensionar para evitar distorsiones y asegurar que est√© limpio
  ctx.clearRect(0, 0, canvas.width, canvas.height);
});

// Iniciar el bucle principal de animaci√≥n de fuegos artificiales cuando se carga la p√°gina
animateFireworks();
